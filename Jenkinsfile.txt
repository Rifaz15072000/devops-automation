// pipeline {
//     agent any
//     tools {
//         maven 'maven'
//         dockerTool 'Docker'    
//     }
//     stages {
//         stage('Build Maven') {
//             steps {
//                 checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Rifaz15072000/devops-automation']])
//                 sh 'mvn clean install'
//             }
//         }
//     stage('Build Docker Image') {
//             steps {
//                 script {
//                     sh 'docker build -t rifaz15072000/devops-integration .'
//                 }
//             }
//         }
//     stage('Push to docker hub') {
//             steps {
//                 script {
//                     withCredentials([string(credentialsId: 'DockerHubPwd', variable: 'Docker')]) {
//                     sh 'docker login -u rifaz15072000 -p ${Docker}'    
//                     }
//                     sh 'docker push rifaz15072000/devops-integration'
//                 }
//             }
//         }
//     stage('K8s Deployment') {
//             steps {
//                 sh 'kubectl apply -f deploymentservice.yaml'
//                 sh 'kubectl get pods'
//             }
//         }
//     }
// }



pipeline {
    agent any
    tools {
        maven 'maven'
    }
    environment {
        DOCKER_HUB_USER = 'rifaz15072000'
        DOCKER_HUB_CREDENTIALS = 'DockerHubPwd' // Jenkins secret text for Docker password/token
        SERVICE_NAME = 'springboot-k8ssvc'
        SERVICE_PORT = '8080'
    }
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }
        stage('Build Maven') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_HUB_USER}/devops-integration ."
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([string(credentialsId: "${DOCKER_HUB_CREDENTIALS}", variable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin"
                }
                sh "docker push ${DOCKER_HUB_USER}/devops-integration"
            }
        }
        stage('K8s Deployment') {
            steps {
                sh '''
                  # ✅ Fix kubeconfig paths if needed
                  sed -i "s|/home/rifaz/.minikube|/root/.minikube|g" /root/.kube/config || true

                  # Apply deployment and service
                  kubectl apply -f deploymentservice.yaml

                  # Wait until rollout completes or fail
                  kubectl rollout status deployment/springboot-k8s-deployment --timeout=120s
                '''
            }
        }
        stage('Get Service URL') {
            steps {
                script {
                    // Get NodePort
                    NODE_PORT = sh(script: "kubectl get svc ${SERVICE_NAME} -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()

                    // Get cluster node IP (works with minikube --network=host)
                    MINIKUBE_IP = sh(script: "kubectl get node minikube -o jsonpath='{.status.addresses[0].address}'", returnStdout: true).trim()

                    SERVICE_URL = "http://${MINIKUBE_IP}:${NODE_PORT}"
                    echo "✅ Service is available at: ${SERVICE_URL}"
                }
            }
        }
    }
}
